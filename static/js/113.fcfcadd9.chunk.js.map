{"version":3,"file":"static/js/113.fcfcadd9.chunk.js","mappings":"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","sources":["firebase/firebase.js","feature/crud.js","store/Context.js","store/reducer.js","store/Provider.js","store/actions.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"@firebase/firestore\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\nconst db = getFirestore(app);\r\n\r\nexport { db };","import { addDoc, arrayUnion, collection, deleteDoc, doc, getDocs, orderBy, query, updateDoc } from \"firebase/firestore\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { db } from \"../firebase/firebase\";\r\nimport { loadData } from \"../store/actions\";\r\n\r\n\r\nconst usersCollectionRef = collection(db, \"todos\");\r\nconst queryRef = query(usersCollectionRef, orderBy(\"name\"));\r\nconst removeTodo = (list, indexId) => {\r\n    return list.slice(0, indexId).concat(list.slice(indexId + 1));\r\n}\r\n\r\nconst getDataFromFireStore = async (dispatch) => {\r\n    const data = await getDocs(queryRef);\r\n    dispatch(loadData(data.docs.map((doc) => ({ ...doc.data(), id: doc.id }))))\r\n}\r\n\r\nconst addFolderFromFireStore = (name) => {\r\n    const docRef = addDoc(usersCollectionRef, {\r\n        name,\r\n        list: []\r\n    })\r\n    docRef\r\n        .then(() => {\r\n            console.log(\"Add success\");\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nconst deleteFolderFromFireStore = (docId) => {\r\n    const docToUpdate = doc(db, \"todos\", docId);\r\n    deleteDoc(docToUpdate)\r\n        .then(() => {\r\n            console.log(\"Xoa thanh cong\");\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nconst updateFolderFromFireStore = (docId, name) => {\r\n    const docToUpdate = doc(db, \"todos\", docId);\r\n    updateDoc(docToUpdate, {\r\n        name\r\n    })\r\n        .then(() => {\r\n            console.log(\"Cap nhat thanh cong\");\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nconst addTodoFromFireStore = (docId, content, date, priority, todo, completed) => {\r\n    const docToUpdate = doc(db, \"todos\", docId);\r\n    updateDoc(docToUpdate, {\r\n        list: arrayUnion({\r\n            id: uuidv4(),\r\n            content,\r\n            date,\r\n            priority,\r\n            todo,\r\n            completed\r\n        })\r\n    })\r\n        .then(() => {\r\n            console.log(\"Them thanh cong\");\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nconst updateTodoFromFireStore = (docId, todoId, list, content, date, priority, todo, completed) => {\r\n    const docToUpdate = doc(db, \"todos\", docId);\r\n    const newList = [...list];\r\n    newList[todoId] = {\r\n        ...newList[todoId],\r\n        content: content,\r\n        date: date,\r\n        completed: completed,\r\n        priority: priority,\r\n        todo: todo\r\n    };\r\n    updateDoc(docToUpdate, {\r\n        list: [\r\n            ...newList\r\n        ]\r\n    })\r\n        .then(() => {\r\n            console.log(\"Cap nhat thanh cong\");\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nconst deleteTodoFromFireStore = (list, docId, indexId) => {\r\n    const docToUpdate = doc(db, \"todos\", docId);\r\n    updateDoc(docToUpdate, {\r\n        list: [\r\n            ...removeTodo(list, indexId)\r\n        ]\r\n    })\r\n        .then(() => {\r\n            console.log(\"Xoa thanh cong\");\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nconst completeTodo = (docId, todoId, list, completed) => {\r\n    const docToUpdate = doc(db, \"todos\", docId);\r\n    const newList = [...list];\r\n    newList[todoId] = {\r\n        ...newList[todoId],\r\n        completed: !completed,\r\n    };\r\n    updateDoc(docToUpdate, {\r\n        list: [\r\n            ...newList\r\n        ]\r\n    })\r\n        .then(() => {\r\n            console.log(\"Cap nhat thanh cong\");\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nexport {\r\n    usersCollectionRef,\r\n    queryRef,\r\n    getDataFromFireStore,\r\n    addFolderFromFireStore,\r\n    deleteFolderFromFireStore,\r\n    updateFolderFromFireStore,\r\n    addTodoFromFireStore,\r\n    updateTodoFromFireStore,\r\n    deleteTodoFromFireStore,\r\n    completeTodo\r\n};\r\n","import { createContext } from \"react\";\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;","const removeTodo = (listNote, folderId, indexId) => {\r\n    return listNote[folderId].list.slice(0, indexId).concat(listNote[folderId].list.slice(indexId + 1));\r\n}\r\n\r\nconst removeFolder = (folder, folderId) => {\r\n    return folder.slice(0, folderId).concat(folder.slice(folderId + 1));\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    const { type, payload } = action;\r\n    let newList;\r\n    switch (type) {\r\n        case \"ADD_TODO\":\r\n            newList = [...state];\r\n            newList[payload.folderId] = {\r\n                ...state[payload.folderId],\r\n                list: [\r\n                    ...state[payload.folderId].list,\r\n                    {\r\n                        id: payload.id,\r\n                        content: payload.content,\r\n                        date: payload.date,\r\n                        completed: payload.complete,\r\n                        priority: payload.priority,\r\n                        todo: payload.todo\r\n                    }\r\n                ]\r\n            };\r\n            break;\r\n        case \"DELETE_TODO\":\r\n            newList = [\r\n                ...state\r\n            ];\r\n            newList[payload.folderId] = {\r\n                ...state[payload.folderId],\r\n                list: [\r\n                    ...removeTodo(state, payload.folderId, payload.todoId)\r\n                ]\r\n            };\r\n            break;\r\n        case \"EDIT_TODO\":\r\n            newList = [...state];\r\n            newList[payload.folderId].list[payload.todoId] = {\r\n                id: payload.id,\r\n                content: payload.content,\r\n                date: payload.date,\r\n                completed: payload.complete,\r\n                priority: payload.priority,\r\n                todo: payload.todo\r\n            };\r\n            break;\r\n        case \"COMPLETE_TODO\":\r\n            newList = [...state];\r\n            newList[payload.folderId].list[payload.todoId] = {\r\n                ...state[payload.folderId].list[payload.todoId],\r\n                completed: !payload.isCompleted\r\n            };\r\n            break;\r\n        case \"ADD_FOLDER\":\r\n            newList = [\r\n                ...state,\r\n                {\r\n                    id: payload.id,\r\n                    name: payload.name,\r\n                    list: []\r\n                }\r\n            ]\r\n            break;\r\n        case \"DELETE_FOLDER\":\r\n            newList = removeFolder(state, payload.folderId);\r\n            break;\r\n        case \"EDIT_FOLDER\":\r\n            newList = [\r\n                ...state\r\n            ];\r\n            newList[payload.folderId] = {\r\n                ...state[payload.folderId],\r\n                name: payload.name\r\n            }\r\n            break;\r\n        case \"LOAD_DATA\":\r\n            newList = [\r\n                ...payload.data\r\n            ];\r\n            break;\r\n        default:\r\n            throw new Error(\"Invalid action\");\r\n    }\r\n    return newList;\r\n}\r\nexport default reducer;","import { onSnapshot } from \"firebase/firestore\";\r\nimport { useEffect, useReducer, useState } from \"react\";\r\nimport { queryRef } from \"../feature/crud\";\r\nimport { loadData } from \"./actions\";\r\nimport Context from \"./Context\";\r\nimport reducer from \"./reducer\";\r\nfunction Provider({ children }) {\r\n    const [folder, dispatch] = useReducer(reducer, []);\r\n    const [stateLoading, setStateLoading] = useState(false);\r\n    useEffect(() => {\r\n        const unsubscribe = onSnapshot(queryRef, (snapshot) => {\r\n            const data = snapshot.docs.map((doc) => ({\r\n                ...doc.data(),\r\n                id: doc.id\r\n            }))\r\n            dispatch(loadData(data));\r\n            setStateLoading(data.length !== 0 ? true : false);\r\n        })\r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Context.Provider value={[folder, dispatch, stateLoading]}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport default Provider;","import { type } from '@testing-library/user-event/dist/type';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst addTodoInFolder = (folderId, content, date, priority, todo, complete) => {\r\n    return {\r\n        type: \"ADD_TODO\",\r\n        payload: {\r\n            folderId,\r\n            id: uuidv4(),\r\n            content,\r\n            date,\r\n            priority,\r\n            todo,\r\n            complete\r\n        }\r\n    }\r\n}\r\n\r\nconst editNoteInFolder = (folderId, todoId, content, date, priority, todo, complete) => {\r\n    return {\r\n        type: \"EDIT_TODO\",\r\n        payload: {\r\n            folderId,\r\n            todoId,\r\n            content,\r\n            date,\r\n            priority,\r\n            todo,\r\n            complete\r\n        }\r\n    }\r\n}\r\n\r\nconst deleteNoteInFolder = (folderId, todoId) => {\r\n    return {\r\n        type: \"DELETE_TODO\",\r\n        payload: {\r\n            folderId,\r\n            todoId\r\n        }\r\n    }\r\n}\r\n\r\nconst completeNote = (folderId, isCompleted, todoId) => {\r\n    return {\r\n        type: \"COMPLETE_TODO\",\r\n        payload: {\r\n            folderId,\r\n            isCompleted,\r\n            todoId\r\n        }\r\n    }\r\n}\r\n\r\nconst addFolder = (name) => {\r\n    return {\r\n        type: \"ADD_FOLDER\",\r\n        payload: {\r\n            id: uuidv4(),\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\nconst deleteFolder = (folderId) => {\r\n    return {\r\n        type: \"DELETE_FOLDER\",\r\n        payload: {\r\n            folderId\r\n        }\r\n    }\r\n}\r\n\r\nconst editFolder = (folderId, name) => {\r\n    return {\r\n        type: \"EDIT_FOLDER\",\r\n        payload: {\r\n            folderId,\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\nconst loadData = (data) => {\r\n    return {\r\n        type: \"LOAD_DATA\",\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    addTodoInFolder,\r\n    editNoteInFolder,\r\n    deleteNoteInFolder,\r\n    completeNote,\r\n    addFolder,\r\n    deleteFolder,\r\n    editFolder,\r\n    loadData\r\n};"],"names":["app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getAnalytics","getFirestore","usersCollectionRef","collection","queryRef","query","orderBy","removeTodo","list","indexId","slice","concat","addFolderFromFireStore","name","addDoc","then","console","log","catch","err","deleteFolderFromFireStore","docId","docToUpdate","doc","deleteDoc","updateFolderFromFireStore","updateDoc","addTodoFromFireStore","content","date","priority","todo","completed","arrayUnion","id","uuidv4","updateTodoFromFireStore","todoId","newList","deleteTodoFromFireStore","completeTodo","Context","createContext","state","action","listNote","folderId","type","payload","complete","isCompleted","folder","removeFolder","data","Error","children","useReducer","reducer","dispatch","useState","stateLoading","setStateLoading","useEffect","unsubscribe","onSnapshot","snapshot","docs","map","loadData","length","value"],"sourceRoot":""}